We use to ping systems using IP address but what if we want to reach system using DNS name.

WE can make entry in DNS entry in /etc/hosts on system A to tell system B's DNS name given to its IP address.

But the B system |hostname| might be different but wht we provide in /etc/hosts file is the source of truth for system A.

NOTE:- As the system increases maintaining hostname of many servers is tedious job on each machine.
        So we decided to create a whole DNS server and put the entries in it.
        Let say IP address of DNS server id 192.168.1.100
        WE now make an entry in each machine of this address in |/etc/resolv.conf| file.

        NOTE:- U can still have entry in /etc/hosts file. Suppose we make an entry in local as well as resolv.conf
                file in that case precedence is taken by local host file.
                8.8.8.8 is the hostname by google that resolve all public website


Configuring DNS server:-
We are given a server dedicated as the DNS server, and a set of Ips to configure as entries in the server. 
There are many DNS server solutions out there, in this lecture we will focus on a particular one – CoreDNS.

So how do you get core dns? CoreDNS binaries can be downloaded from their Github releases page or as a docker image. 
Let’s go the traditional route. Download the binary using curl or wget. And extract it. You get the coredns executable.
Run the executable to start a DNS server. It by default listens on port 53, which is the default port for a DNS server.

1. First we put all of the entries into the DNS servers /etc/hosts file
2. And then we configure CoreDNS to use that file. CoreDNS loads it’s configuration from a file named Corefile.
 Here is a simple configuration that instructs CoreDNS to fetch the IP to hostname mappings from the file /etc/hosts. 
 When the DNS server is run, it now picks the Ips and names from the /etc/hosts file on the server.

https://github.com/kubernetes/dns/blob/master/docs/specification.md

https://coredns.io/plugins/kubernetes/

