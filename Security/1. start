## Securing a Cluster

As Kubernetes is entirely API driven, controlling and limiting who can access the cluster and what actions they
are allowed to perform is the first line of defense.

-> Use Transport Layer Security (TLS) for all API traffic
Kubernetes expects that all API communication in the cluster is encrypted by default with TLS, and the majority
of installation methods will allow the necessary certificates to be created and distributed to the cluster components.

a.) API Authentication:- Who can access
                        1. Username and password
                        2. Username tokens
                        3. Certificates
                        4. External Authentication provider - LDAP
                        5. Service accounts

b.) API Authorization:- What can they do
                        1. RBAC Authorization
                        2. ABC Authorization
                        3. Node Authorization

Note:- All users are managed by Kube-apiserver. It authenticate the request coming from admin or users before
        proceeding it further.


# Goals #
1. Wht are TLS certificates
2. How does K8s uses them to authenticate and comminicate bw each other.
3. How to generate them
4. How to configure them
5. How to view them.
6. How to trobleshoot issues related to it.

1. Symmetric encryption - When user send the data from client to server it will encrpyt in single key that is
    used for both encryption and decryption thst makes it easy to hack it

2. Asymmetric encryption - It uses private key and public key/public lock.
    When we access cloud server company locks it with public lock and anybody can try to break it.
    But only we get the private key to unlock it which is stored in our PC only.

NOW in website scenario the public lock and private key are genrated by server and the public lock is shared to user
by the browser. The data is already encrypted using symmetric way is locked in that public lock and send to the server.
The server only have the private key to encrypt the public lock as well as symmetic key to get data of user.

-> But now hacker can make replica of that website to take ur data as trusted source.
    For this, server send certificate with public key and its browser responsibility to check its legitimate or not.

IMP -> The certificate consist of Issuer, subject name, whom it issued to , location, the weburl field consists
       all other names that user can reach to valid point so that browser verify legitimate access
       Server signing authority(CN) issues cert that are legitimate in public domain. For internal comm we can self
       sign cert to establish trust.Now the browser also store public keys of different CA's so that it verify the cert
       are signed by trusted entity private keys.


\\Public Key - (.crt, .pem)
\\Provate Key - (.key, .key.pem)
