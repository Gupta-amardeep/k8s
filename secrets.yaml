# Kubernetes Secrets let you store and manage sensitive information, such as passwords, OAuth tokens, and ssh keys. Storing confidential information in a Secret is safer and more flexible than putting it verbatim in a Pod definition or in a container image .

# 1. Creating a Secret Using kubectl:-
# echo -n 'admin' > ./username.txt
# echo -n '1f2d1e2e67df' > ./password.txt

# kubectl create secret generic db-user-pass --from-file=./username.txt --from-file=./password.txt

# kubectl get secrets
# kubectl describe secrets/db-user-pass

# 2. Creating a Secret manually:-
# echo -n 'admin' | base64
# YWRtaW4=
# echo -n '1f2d1e2e67df' | base64
# MWYyZDFlMmU2N2Rm

apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  username: YWRtaW4=
  password: MWYyZDFlMmU2N2Rm

#kubectl apply -f ./secret.yaml

# 3. For certain scenarios, you may wish to use the stringData field instead. This field allows you to put a non-base64 encoded string directly into the Secret, and the string will be encoded for you when the Secret is created or updated.
# For example, if your application uses the following configuration file:

# apiUrl: "https://my.api.com/api/v1"
# username: "user"
# password: "password"

apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
stringData:
  config.yaml: |-
    apiUrl: "https://my.api.com/api/v1"
    username: {{username}}
    password: {{password}}

#The stringData field is a write-only convenience field. It is never output when retrieving Secrets. For example, if you run the following command:

# Decoding a Secret

# kubectl get secret mysecret -o yaml
# echo 'MWYyZDFlMmU2N2Rm' | base64 --decode
# kubectl edit secrets mysecret

